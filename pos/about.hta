<html>
<head>
<title>About this system</title>
<style>
html {
font-family: Arial, Helvetica, Sans-Serif;
}
table {

}
td {
border: 1px solid #000000;
padding: 0.8em;
}
th {
border: 1px solid #000000;
}
</style>
<HTA:APPLICATION
  APPLICATIONNAME="My HTML application"
  ID="MyHTMLapplication"
  VERSION="1.0"/>
</head>

<script language="VBScript">

Sub Window_OnLoad
  'This method will be called when the application loads
  'Add your code here
End Sub

</script>

<body bgcolor="white">
<h1 align="center">NJ Concessions Point of Sales</h1>
<h2 align="center">Version: 0.0.1</h2>
<p><b>Registered to: </b>Norman Watne; Jessica Watne</b></p>
<p><b>Registration ID: </b>796913-69146-798524-2465</p>
<table>
<tr>
<th>Technical Support</th>
<th>Development</th>
<th>Technical Information</th>
<tr>
<td>Watne's Data Network Solutions<br>Michael Watne<br>michael.a.watne@gmail.com<br>731-358-0335</p></td>
<td>Watne's Data Network Solutions<br>Michael Watne<br>michael.a.watne.com<br>731-358-0335</p></td>
<td><img src="syslogo.png" style="width:300px;height:auto;" /><br>
Your network IP is: <h1 id=list>-</h1>

</td>
</tr>
</table>
<script type="text/JavaScript">

// NOTE: window.RTCPeerConnection is "not a constructor" in FF22/23
var RTCPeerConnection = /*window.RTCPeerConnection ||*/ window.webkitRTCPeerConnection || window.mozRTCPeerConnection;

if (RTCPeerConnection) (function () {
    var rtc = new RTCPeerConnection({iceServers:[]});
    if (1 || window.mozRTCPeerConnection) {      // FF [and now Chrome!] needs a channel/stream to proceed
        rtc.createDataChannel('', {reliable:false});
    };
    
    rtc.onicecandidate = function (evt) {
        // convert the candidate to SDP so we can run it through our general parser
        // see https://twitter.com/lancestout/status/525796175425720320 for details
        if (evt.candidate) grepSDP("a="+evt.candidate.candidate);
    };
    rtc.createOffer(function (offerDesc) {
        grepSDP(offerDesc.sdp);
        rtc.setLocalDescription(offerDesc);
    }, function (e) { console.warn("offer failed", e); });
    
    
    var addrs = Object.create(null);
    addrs["0.0.0.0"] = false;
    function updateDisplay(newAddr) {
        if (newAddr in addrs) return;
        else addrs[newAddr] = true;
        var displayAddrs = Object.keys(addrs).filter(function (k) { return addrs[k]; });
        document.getElementById('list').textContent = displayAddrs.join(" or perhaps ") || "n/a";
    }
    
    function grepSDP(sdp) {
        var hosts = [];
        sdp.split('\r\n').forEach(function (line) { // c.f. http://tools.ietf.org/html/rfc4566#page-39
            if (~line.indexOf("a=candidate")) {     // http://tools.ietf.org/html/rfc4566#section-5.13
                var parts = line.split(' '),        // http://tools.ietf.org/html/rfc5245#section-15.1
                    addr = parts[4],
                    type = parts[7];
                if (type === 'host') updateDisplay(addr);
            } else if (~line.indexOf("c=")) {       // http://tools.ietf.org/html/rfc4566#section-5.7
                var parts = line.split(' '),
                    addr = parts[2];
                updateDisplay(addr);
            }
        });
    }
})(); else {
    document.getElementById('list').innerHTML = "<code>ifconfig | grep inet | grep -v inet6 | cut -d\" \" -f2 | tail -n1</code>";
    document.getElementById('list').nextSibling.textContent = "In Chrome and Firefox your IP should display automatically, by the power of WebRTCskull.";
}

</script>
<!--Add your controls here-->

<!--{{InsertControlsHere}}-Do not remove this line-->
</body>
</html>